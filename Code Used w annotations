#BiocManager::install("Seurat") #installs Seurat with BiocManager
#BiocManager::install("dplyr") #installs dplyr with BiocManager
#BiocManager::install("Matrix") #installs Matrix with BiocManager
#BiocManager::install("ggplot2") #installs ggplot2 with BiocManager
#BiocManager::install("cowplot") #installs cowplot with BiocManager
#BiocManager::install("patchwork") #patchwork with BiocManager
library(Seurat) #accesses Seurat
library(dplyr) #accesses dplyr
library(Matrix) #accesses Matrix
library(ggplot2) #accesses ggplot2
library(cowplot) #accesses cowplot
library(patchwork) #accesses patchwork


dm.1<- read.delim(file = "./REPLICATE1.dge.txt", header=T) #sets the read of the file "./REPLICATE1.dge.txt" as dm.1   It read the table. 
dm.2<- read.delim(file = "./REPLICATE2.dge.txt", header=T) #sets the read of the file "./REPLICATE2.dge.txt" as dm.2   It read the table. 
dm.3<- read.delim(file = "./REPLICATE3.dge.txt", header=T) #sets the read of the file "./REPLICATE3.dge.txt" as dm.3   It read the table. 
#tables need ot be put in the right format. 
dm.1[is.na(dm.1)] =0 #Removes the NA from the table and replace it with 0.
dm.2[is.na(dm.2)] =0 #Removes the NA from the table and replace it with 0.
dm.3[is.na(dm.3)] =0 #Removes the NA from the table and replace it with 0.

d.dm.1 =dm.1 #data is stored in another object so it can be modified without modifying te original. 
row.names(d.dm.1) = d.dm.1$GENE #put the "gene" column as the row name for the table. 
d.dm.1 = d.dm.1[,-1]  #removes the extra column from the table. 
d.dm.2 =dm.2#data is stored in another object so it can be modified without modifying te original. 
row.names(d.dm.2) = d.dm.2$GENE #put the "gene" column as the row name for the table. 
d.dm.2 = d.dm.2[,-1]#removes the extra column from the table. 
d.dm.3 =dm.3#data is stored in another object so it can be modified without modifying te original. 
row.names(d.dm.3) = d.dm.3$GENE #put the "gene" column as the row name for the table. 
d.dm.3 = d.dm.3[,-1]#removes the extra column from the table. 

DM.1<- CreateSeuratObject(counts = d.dm.1, project ="DM.1", min.cells = 3, min.features = 200) #initialize the Seurat object and set as new object. 
DM.2<- CreateSeuratObject(counts  = d.dm.2, project ="DM.2", min.cells = 3, min.features = 200) #initialize the Seurat object and set as new object. 
DM.3<- CreateSeuratObject(counts =  d.dm.3, project ="DM.3", min.cells = 3, min.features = 200) #initialize the Seurat object and set as new object. 
######min features = 200 means we want at least 200 genes in a minimum of 3 cells. 
DM.1 #prints DM.1 to see make sure it was initialized correctly. 

head(DM.1@meta.data) #prints first couple rows of the table. Each row is a different cell and each column i a different piece of information (which file it came from (which DM), the UMI count, the the number of genes (features))
unique(DM.1@meta.data$nCount_RNA) #gives information on the column of the data. 
summary(DM.1@meta.data) #Gives distribution of the variables. 
#Plots the distribution of the gene counts and the UMI counts
p1=ggplot(data=DM.1@meta.data, aes(x=nCount_RNA, fill=orig.ident)) +
  geom_density(alpha=0.3) +
  #xlim(c(0,2000))+
  scale_fill_brewer(palette="Dark2") + 
  theme_minimal()+
  labs(main="nUMI")
p2=ggplot(data=DM.1@meta.data, aes(x=nFeature_RNA, fill=orig.ident)) +
  geom_density(alpha=0.3) +
  #xlim(c(0,500))+
  scale_fill_brewer(palette="Dark2") + 
  theme_minimal()+
  labs(main="nGene")

plot_grid(p1,p2) #plots the graphs next to each other


#Shows relationship between number of genes and number of UMI as a scatterplot. There is a positive relationship. 
p3=ggplot(data = DM.1@meta.data ,aes(y = nFeature_RNA, x = nCount_RNA,color=orig.ident)) +   geom_point(dotsize=0.5, alpha=0.5) +
  scale_fill_brewer(palette="Dark2") + theme_minimal()

p4=ggplot(data = DM.1@meta.data ,aes(y =nFeature_RNA, x = nCount_RNA,color=orig.ident)) +   geom_point(dotsize=0.5, alpha=0.5) +
  scale_fill_brewer(palette="Dark2") + theme_minimal() +
  xlim(0,1000) + ylim(0,1000)

plot_grid(p3,p4,labels = c("nGene_vs_nUMI","zoom"))

#each point is a different cell which has a measured number of genes and UMIs coorsponding to the coordinates on the graph. 
#The zoom is achieved my setting limits on the x and y axis of the graphs so that they show only the cells with UMI numbers and gene numbers between 200 and 1000. 
#There is a cut at 200 because earlier when we initialized the Seraut object, we had specified that we wanted only cells that had at least 200 genes, so no cells with fewer than 200 genes were included. 
#When done with the other replicates, a similar pattern could be seen. They all seem to have a logarithmic trendline. 
#To plot them all on the same plot, you would create an object containing all the replicates and then graph the ncoun_RNA vs nFreature_RNA for that new object.
p5=ggplot(data = DM.2@meta.data ,aes(y = nFeature_RNA, x = nCount_RNA,color=orig.ident)) +   geom_point(dotsize=0.5, alpha=0.5) +
  scale_fill_brewer(palette="Dark2") + theme_minimal()

p6=ggplot(data = DM.2@meta.data ,aes(y =nFeature_RNA, x = nCount_RNA,color=orig.ident)) +   geom_point(dotsize=0.5, alpha=0.5) +
  scale_fill_brewer(palette="Dark2") + theme_minimal() +
  xlim(0,1000) + ylim(0,1000)

plot_grid(p5,p6,labels = c("nGene_vs_nUMI","zoom"))

p7=ggplot(data = DM.3@meta.data ,aes(y = nFeature_RNA, x = nCount_RNA,color=orig.ident)) +   geom_point(dotsize=0.5, alpha=0.5) +
  scale_fill_brewer(palette="YIGn") + theme_minimal()

p8=ggplot(data = DM.3@meta.data ,aes(y =nFeature_RNA, x = nCount_RNA,color=orig.ident)) +   geom_point(dotsize=0.5, alpha=0.5) +
  scale_fill_brewer(palette="Set3") + theme_minimal() +
  xlim(0,1000) + ylim(0,1000)

plot_grid(p7,p8,labels = c("nGene_vs_nUMI","zoom"))
p1+p2+p3+p4+p5+p6+p7+p8 #Prints all the graphs next to eah other. 

#We want to calculate the percentage of mitochondrial genes and store it in percent.mito using the AddMetaData. mitochondrial genes have certain pattern
rownames(DM.1@assays$RNA)[1:5] #brings up the genes in each object. 
grep(pattern = "^mt-",x= rownames(DM.1@assays$RNA), value = T) #grep extracts elements that contain a certain pattern from the list. This pulls out genes marked with the pattern ^t- which indicate that they are mitocondrial genes. 
#this yielded nothing, so there are no mitochondrial genes with this naming pattern. A different naming pattern was used. 
grep("CO",x= rownames(DM.1@assays$RNA), value = T) #prints genes with mitochondrial gene naming pattern "CO"
grep("co",x= rownames(DM.1@assays$RNA), value = T) #prints genes with mitochondrial gene naming pattern "co"

#calculating percentage of mitochondrial genes with CO pattern
percent.mito <- grep("co",x= rownames(DM.1@assays$RNA), value = T)
percent.mito <- colSums(DM.1@raw.data[mito.genes, ])/colSums(ALL@raw.data)

DM.1[["percent.mt"]] <- AddMetaData(DM.1, percent.mito, "percent.mito")

#Or this other way
DM.1[["percent.mt"]] <- PercentageFeatureSet(DM.1, pattern = "co")

#How many cells are? There are 1756 cells. 
nrow(DM.1@meta.data)

#Subset in ALL the data sets. only cells with more than 100 genes and more than 700 UMIs. 
DM.1 <- subset(DM.1, subset = nFeature_RNA > 100 & nCount_RNA> 700)

#How many cells are now? There are 907 cells with more than 100 genes and more than 700 UMIs. 
nrow(DM.1@meta.data)


DM.1 <-  NormalizeData(object = DM.1, normalization.method = "LogNormalize", scale.factor = 10000,verbose = F) #Normalizes the gene expression measurements for each cell by total expression, multiplies this by the scale factor of 10000 to increase the level since gene expression is really low in a single cell, and then log transforms the result to reducethe variability. 

DM.1 <- FindVariableFeatures(DM.1, selection.method = "vst", nfeatures = 2000,verbose = F) #Caculates average expression and dispersion for genes selected with the vst selection method. 

top10 <- head(VariableFeatures(DM.1), 10) # Identify the 10 most highly variable genes
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(DM.1)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2 #prints plot with labels. 
#The top 10 genes are mCherry, CG14687, Vmat, Dh31, Gad1, CG14989, mbl, DAT, CG8369, Mip
#It makes sense that they appear in this data because these genes are highly studied because of their variability and are expression in a lot of different type of cells. 

#create a list
dm.list<-list(DM.1,DM.2,DM.3)

#Do a for loop for all DM. For each of the replicates, you take a subset of cells with more than 100 genes and more than 700 UMIs, and set it as an object. 
#Then you take the object that you just made and normalize it against total expression and replace the object with the normalized set of data. 
#then you take the object that was just normalized and you find the variable genes. It calculates average expression and dispersion for 2000 genes using the vst selection method to determine which genes are the most variable. 
#This was done for all three replicates. 
for (i in 1:length(dm.list)) {
    dm.list[[i]] <- subset(dm.list[[i]], subset = nFeature_RNA > 100 & nCount_RNA> 700)
    dm.list[[i]] <- NormalizeData(dm.list[[i]], verbose = FALSE) #normalize
    dm.list[[i]] <- FindVariableFeatures(dm.list[[i]], selection.method = "vst", 
        nfeatures = 2000, verbose = FALSE) #find variable genes
}

#Find anchors
anchors <- FindIntegrationAnchors(object.list = dm.list, dims = 1:30,verbose = F)
ALL <- IntegrateData(anchorset = anchors, dims = 1:30,verbose = F)

#remove the anchors, they are too big and we will not use them anymore
rm(anchors)

#How does the meta.data looks like now? how many "orig.ident" there are? The meta.data is much larger now since it includes much more cells. There are 3 unique orig.ident across the 2573 cells. 
as.data.frame(ALL@meta.data)

unique(ALL@meta.data$orig.ident)

#Plot the quality plots and compare the replicates. This shows all three replicates on the same graph of UMI number vs gene number. 
ggplot(data = ALL@meta.data ,aes(y =nFeature_RNA, x = nCount_RNA,color=orig.ident)) +   geom_point(dotsize=0.5, alpha=0.5) +
  scale_fill_brewer(palette="Dark2") + theme_minimal() 

#This shows the density of the UMI and genes for each of the replicates on the same two graphs and shows where there is overlap and where there is difference. 
p1=ggplot(data=ALL@meta.data, aes(x=nCount_RNA, fill=orig.ident)) +
  geom_density(alpha=0.3) +
  #xlim(c(0,2000))+
  scale_fill_brewer(palette="Dark2") + 
  theme_minimal()+
  labs(main="nUMI")
p2=ggplot(data=ALL@meta.data, aes(x=nFeature_RNA, fill=orig.ident)) +
  geom_density(alpha=0.3) +
  #xlim(c(0,500))+
  scale_fill_brewer(palette="Green") + 
  theme_minimal()+
  labs(main="nGene")

plot_grid(p1,p2)

#Description of forloop: 
#Do a for loop for all DM. For each of the replicates, you take a subset of cells with more than 100 genes and more than 700 UMIs, and set it as an object. 
#Then you take the object that you just made and normalize it against total expression and replace the object with the normalized set of data. 
#then you take the object that was just normalized and you find the variable genes. It calculates average expression and dispersion for 2000 genes using the vst selection method to determine which genes are the most variable. 
#This was done for all three replicates. 

#The dimensions used in the integration are 1:30 

ALL <-ScaleData(object = ALL,verbose = F) #scales the expression of each gene so variance across cells is 1. Equal importance to expression of all genes. 

#switch to integrated assay. The variable features of this assay are automatically set during IntegrateData
DefaultAssay(ALL) <- "integrated"

# Run the standard workflow for visualization and clustering
ALL <- ScaleData(ALL, verbose = FALSE) #The scaling is now done on the integrated data

#Run the PCA, npcs is the maximum PCs computed
ALL <- RunPCA(ALL, npcs = 30, verbose = FALSE)

# Visualizing the PCs and determine the significance
ElbowPlot(ALL,ndims = 30) + geom_hline(yintercept = 2,linetype=2) #All PCs above 2 standard deviations would be selected, so 24. 

#These are plots of the spread of the PC on two dimensions. We are looking for deviations from clusters. 
p1=DimPlot(ALL, reduction = "pca",dims = c(1,2)) 
p2=DimPlot(ALL, reduction = "pca",dims = c(2,3))
p3=DimPlot(ALL, reduction = "pca",dims = c(2,5))
p4=DimPlot(ALL, reduction = "pca",dims = c(21,3))
p1+p2+p3+p4
#Are 2 dimensions enough to descrive the data? yes, it seems to be enough. THe data can still be interpreted. in two dimensions. Though it may be easier to interpret in 3 dimensions. 
#visualize with heat map
DimHeatmap(ALL, dims = 1:6, cells = 500, balanced = TRUE)

ALL <- FindNeighbors(ALL, dims = 1:30,reduction = "pca") #Calculates the distance/similarity between cells. Performs KNN graph based on distance in the PC values. 
#What are these dimensions? Dimensions are 1:30 so it's a 1 by 30 row long matrix. There are 30 PCs.
ALL <- FindClusters(ALL, resolution = 3) #Groups cells together that have similar distances. 

#explore the meta data now, what is new now? There are 6 sets of notable cells
as.data.frame(head(ALL@meta.data)) #Prints the data. 

ALL <- RunUMAP(ALL, reduction = "pca", dims = 1:30) #Visualize the clusters in the 30. See which ones are related to which others. 

#explore the meta data now, what is new now? There is nothing different. 
as.data.frame(head(ALL@meta.data))

#Plot
DimPlot(object = ALL,label = T) #Plot the clusters and PCs. 

p1 <- DimPlot(ALL, reduction = "umap", group.by = "orig.ident") #we can color the cells based on any of the things in the meta.data
p2 <- DimPlot(ALL, reduction = "umap", label = T,repel = TRUE)
p1 + p2

#There are 26 clusters. I think this is enough becuase it is a relatively large number of clusters which was expected since there were a lot of types of tissus. We don't want too many or it will be hard to analyze. 

# find markers for every cluster compared to all remaining cells, report only the positive ones
markers.all <- FindAllMarkers(ALL, only.pos = TRUE, min.pct = 0.25, logfc.threshold  = 0.25,verbose = F)
top10.markers.all <- markers.all %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC) #what do you think this is doing?
#This is listing the top 10 markers by similarity and grouping them by cluster. 
#Visualization

DoHeatmap(ALL, features = top10.markers.all$gene)
#THe colours represent changes in expression, wheter there was increased or decreased expression. Yellow means 2x increase in expression, and purple means expression of the gene was halved. Black means there was no change in the expression of the gene. 
#Not all clusters are equally important because some show the same data and therefore are similar in expression. That is why we wanted the top 10 because they would give the most information. 
#in cluster 0, there was a decrease in genes lik CG31221, jeb, heph, spab, VAChT, and CG7708, but increases in expression in genes VGlut, CG32017, Nplp1, slgA, CG10804, Lmx1a, hbn. In most cells, there was mixxed changes in expression of other genes. 
#Cluster 0 likely has to do with protein transport because there were increases in expression of genes for transmembrane transporters. There was decrease expression of low-density lipoprotein coding genes. To determine the cell identity, you would have to see what pattern exists in the genes that were upregulated and down regulated and determine what the function of the cluster could be.


